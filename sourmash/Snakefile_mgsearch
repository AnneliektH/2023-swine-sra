SAMPLE, = glob_wildcards('sig_files/sketch_reads/{filename}.sig.gz')
VIRDB = 'sig_files/signatures_concat/allvOTUs.zip',
MAGDB = 'sig_files/signatures_concat/allMAGs.zip',

rule all:
    input:
        expand('manifests/MAGs/{sample}.mf.all.csv', sample=SAMPLE),
        expand('manifests/vOTUs/{sample}.mf.all.csv', sample=SAMPLE),
        # expand('manifests/MAGs/{sample}.mf.95.csv', sample=SAMPLES),
        # expand('manifests/MAGs/{sample}.mf.99.csv', sample=SAMPLES),
#       expand('mgmanysearch/{query}_samples.gather.csv', query=QUERYS),
#       expand('gather_out/fastgather/{query}/{sample}.fg.csv', query=QUERYS, sample=SAMPLES),


# fastgather
# need a treshold bp for viruses ~3000
rule fastgather_m:
    input:
        sig='sig_files/sketch_reads/{sample}.sig.gz',
    output:
        csv='gather_out/fastgather/allMAGs/{sample}.fg.csv',
    resources:
        rayon_exclude=1,
        mem_mb=15000
    shell: """
    sourmash scripts fastgather {input.sig} \
    {MAGDB} -k 21 --scaled 1000 -o {output.csv} -c 6
    """

# fastgather
# need a treshold bp for viruses ~3000
rule fastgather_v:
    input:
        sig='sig_files/sketch_reads/{sample}.sig.gz',
    output:
        csv='gather_out/fastgather/allvOTUs/{sample}.fg.csv',
    resources:
        rayon_exclude=1,
        mem_mb=15000
    shell: """
    sourmash scripts fastgather {input.sig} --threshold-bp 3000 \
    {VIRDB} -k 21 --scaled 1000 -o {output.csv} -c 6
    """

# Create manifests for each fastgather run
rule manifest_m:
    input:
        csv='gather_out/fastgather/allMAGs/{sample}.fg.csv',
        M95='../genome_stats/240214_allMAG95.nf.sort.txt',
        M99='../genome_stats/240214_allMAG99.nf.sort.txt',
    output:
        ln=temporary('manifests/MAGs/{sample}.list.csv'),
        nh=temporary('manifests/MAGs/{sample}.list.nh.csv'),
        rms = temporary('manifests/MAGs/{sample}.rms.csv'),
        resall=temporary('manifests/MAGs/{sample}.all.csv'),
        res95=temporary('manifests/MAGs/{sample}.95.csv'),
        res99=temporary('manifests/MAGs/{sample}.99.csv'),
        fpall=temporary('manifests/MAGs/{sample}.all.fp.csv'),
        fp95=temporary('manifests/MAGs/{sample}.95.fp.csv'),
        fp99=temporary('manifests/MAGs/{sample}.99.fp.csv'),
        sall=temporary('manifests/MAGs/{sample}.all.s.csv'),
        s95=temporary('manifests/MAGs/{sample}.95.s.csv'),
        s99=temporary('manifests/MAGs/{sample}.99.s.csv'),
        mfall='manifests/MAGs/{sample}.mf.all.csv',
        mf95='manifests/MAGs/{sample}.mf.95.csv',
        mf99='manifests/MAGs/{sample}.mf.99.csv',
    shell: """
    csvtk cut -f match_name {input.csv} > {output.ln}
    csvtk del-header {output.ln} > {output.nh}
    sed 's~^../atlas/MAGs/genomes/all_fasta/fastafiles/~~' {output.nh} > {output.rms}
    sed -i -e 's/.fasta//g' {output.rms}
    sort -u {output.rms} > {output.resall}
    comm -1 -2 {output.resall} {input.M95} > {output.res95}
    comm -1 -2 {output.resall} {input.M99} > {output.res99}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/MAGs/#" {output.resall} > {output.fpall}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/MAGs/#" {output.res95} > {output.fp95}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/MAGs/#" {output.res99} > {output.fp99}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fpall} > {output.sall}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fp95} > {output.s95}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fp99} > {output.s99}
    sourmash sig collect $(cat {output.sall}) -o {output.mfall} -F csv
    sourmash sig collect $(cat {output.s95}) -o {output.mf95} -F csv
    sourmash sig collect $(cat {output.s99}) -o {output.mf99} -F csv
    """
rule manifest_v:
    input:
        csv='gather_out/fastgather/allvOTUs/{sample}.fg.csv',
        M95='../genome_stats/240215_high_qualityvOTUs95.nc.sort.txt',
        M99='../genome_stats/240215_high_qualityvOTUs99.nc.sort.txt',
    output:
        ln=temporary('manifests/vOTUs/{sample}.list.csv'),
        nh=temporary('manifests/vOTUs/{sample}.list.nh.csv'),
        resall=temporary('manifests/vOTUs/{sample}.all.csv'),
        res95=temporary('manifests/vOTUs/{sample}.95.csv'),
        res99=temporary('manifests/vOTUs/{sample}.99.csv'),
        fpall=temporary('manifests/vOTUs/{sample}.all.fp.csv'),
        fp95=temporary('manifests/vOTUs/{sample}.95.fp.csv'),
        fp99=temporary('manifests/vOTUs/{sample}.99.fp.csv'),
        sall=temporary('manifests/vOTUs/{sample}.all.s.csv'),
        s95=temporary('manifests/vOTUs/{sample}.95.s.csv'),
        s99=temporary('manifests/vOTUs/{sample}.99.s.csv'),
        mfall='manifests/vOTUs/{sample}.mf.all.csv',
        mf95='manifests/vOTUs/{sample}.mf.95.csv',
        mf99='manifests/vOTUs/{sample}.mf.99.csv',
    shell: """
    csvtk cut -f match_name {input.csv} > {output.ln}
    csvtk del-header {output.ln} > {output.nh}
    sort -u {output.nh} > {output.resall}
    comm -1 -2 {output.resall} {input.M95} > {output.res95}
    comm -1 -2 {output.resall} {input.M99} > {output.res99}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/sketch_vOTUs/high_qual/#" {output.resall} > {output.fpall}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/sketch_vOTUs/high_qual/#" {output.res95} > {output.fp95}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/sketch_vOTUs/high_qual/#" {output.res99} > {output.fp99}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fpall} > {output.sall}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fp95} > {output.s95}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fp99} > {output.s99}
    sourmash sig collect $(cat {output.sall}) -o {output.mfall} -F csv
    sourmash sig collect $(cat {output.s95}) -o {output.mf95} -F csv
    sourmash sig collect $(cat {output.s99}) -o {output.mf99} -F csv
    """


# # Do mgsearch, 1 metag per 1 list of queries
# # Because if time runs out, then at leaset part will be done
# rule do_mgsearch:
#     input:
#         sample='sig_files/sketch_reads/{sample}.sig.gz',
#         query='sig_files/signatures_concat/{query}.sig.gz',
#     output:
#         csv='mgmanysearch/{query}/{sample}.gather.csv'
#     shell: """
#     sourmash scripts mgmanysearch --queries {input.query} \
#     --against {input.sample} -k 21 --scaled 1000 -o {output.csv} 
#     """


