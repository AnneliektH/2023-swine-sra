SAMPLE, = glob_wildcards('sig_files/sketch_reads/{filename}.sig.gz')
VIRDB = 'sig_files/signatures_concat/allvOTUs.zip',
MAGDB = 'sig_files/signatures_concat/allMAGs.zip',
DEDUP = ['all', 99, 95]


rule all:
    input:
        expand('mgmanysearch/vOTU/{sample}.{dedup}.csv', sample=SAMPLE, dedup=DEDUP),
        expand('mgmanysearch/MAGs/{sample}.{dedup}.csv', sample=SAMPLE, dedup=DEDUP),
        # expand('manifests/MAGs/{sample}.mf.95.csv', sample=SAMPLES),
        # expand('manifests/MAGs/{sample}.mf.99.csv', sample=SAMPLES),
#       expand('mgmanysearch/{query}_samples.gather.csv', query=QUERYS),
#       expand('gather_out/fastgather/{query}/{sample}.fg.csv', query=QUERYS, sample=SAMPLES),


# fastgather
# need a treshold bp for viruses ~3000
rule fastgather_m:
    input:
        sig='sig_files/sketch_reads/{sample}.sig.gz',
    output:
        csv='gather_out/fastgather/allMAGs/{sample}.fg.csv',
    resources:
        rayon_exclude=1,
        mem_mb=15000
    shell: """
    sourmash scripts fastgather {input.sig} \
    {MAGDB} -k 21 --scaled 1000 -o {output.csv} -c 6
    """

# fastgather
# need a treshold bp for viruses ~3000
rule fastgather_v:
    input:
        sig='sig_files/sketch_reads/{sample}.sig.gz',
    output:
        csv='gather_out/fastgather/allvOTUs/{sample}.fg.csv',
    resources:
        rayon_exclude=1,
        mem_mb=15000
    shell: """
    sourmash scripts fastgather {input.sig} --threshold-bp 3000 \
    {VIRDB} -k 21 --scaled 1000 -o {output.csv} -c 6
    """

# rule manifest_smashm:
#     input:
#         csv='gather_out/fastgather/allMAGs/{sample}.fg.csv',
#     output:
#         mf='manifests/MAGs/{sample}.mf.{dedup}.csv',
#         ln=temporary('manifests/MAGs/{sample}.list.csv')
#     shell:"""
#     csvtk cut -f match_md5 {input.csv} > {output.ln}
#     sourmash sig check {MAGDB} --picklist {output.ln}:match_md5:md5 -o {output.mf}
#     """

# rule manifest_smashv:
#     input:
#         csv='gather_out/fastgather/allvOTUs/{sample}.fg.csv',
#     output:
#         mf='manifests/vOTUs/{sample}.mf.{dedup}.csv',
#         ln=temporary('manifests/vOTUs/{sample}.list.csv')
#     shell:"""
#     csvtk cut -f match_md5 {input.csv} > {output.ln}
#     sourmash sig check {MAGDB} --picklist {output.ln}:match_md5:md5 -o {output.mf}
#     """


# Sort the fastgather results so we can make manifests
rule sort_m:
    input:
        csv='gather_out/fastgather/allMAGs/{sample}.fg.csv',
    output:
        ln=temporary('manifests/MAGs/{sample}.list.csv'),
        nh=temporary('manifests/MAGs/{sample}.list.nh.csv'),
        rms = temporary('manifests/MAGs/{sample}.rms.csv'),
        sort='manifests/MAGs/{sample}.sort.csv',
    shell: """
    csvtk cut -f match_name {input.csv} > {output.ln}
    csvtk del-header {output.ln} > {output.nh}
    sed 's~^../atlas/MAGs/genomes/all_fasta/fastafiles/~~' {output.nh} > {output.rms}
    sed -i -e 's/.fasta//g' {output.rms}
    sort -u {output.rms} > {output.sort}
    """

# Create manifests for each fastgather run
rule manifest_m:
    input:
        csv='manifests/MAGs/{sample}.sort.csv',
        dedupc='../genome_stats/genome_lists/MAGs.{dedup}.txt',
    output:
        comp=temporary('manifests/MAGs/{sample}.{dedup}.comp.csv'),
        fp=temporary('manifests/MAGs/{sample}.{dedup}.fp.csv'),
        sigp=temporary('manifests/MAGs/{sample}.{dedup}.s.csv'),
        mf='manifests/MAGs/{sample}.mf.{dedup}.csv',
    shell: """
    comm -1 -2 {input.csv} {input.dedupc} > {output.comp}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/MAGs/#" {output.comp} > {output.fp}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fp} > {output.sigp}
    sourmash sig collect $(cat {output.sigp}) -o {output.mf} -F csv
    """

# Sort the fastgather results so we can make manifests
rule sort_v:
    input:
        csv='gather_out/fastgather/allvOTUs/{sample}.fg.csv',
    output:
        ln=temporary('manifests/vOTUs/{sample}.list.csv'),
        nh=temporary('manifests/vOTUs/{sample}.list.nh.csv'),
        sort='manifests/vOTUs/{sample}.sort.csv',
    shell: """
    csvtk cut -f match_name {input.csv} > {output.ln}
    csvtk del-header {output.ln} > {output.nh}
    sed -i -e 's/.fasta//g' {output.nh}
    sort -u {output.nh} > {output.sort}
    """

# Create manifests for each fastgather run
rule manifest_v:
    input:
        csv='manifests/vOTUs/{sample}.sort.csv',
        dedupc='../genome_stats/genome_lists/vOTUs.{dedup}.txt',
    output:
        comp=temporary('manifests/vOTUs/{sample}.{dedup}.comp.csv'),
        fp=temporary('manifests/vOTUs/{sample}.{dedup}.fp.csv'),
        sigp=temporary('manifests/vOTUs/{sample}.{dedup}.s.csv'),
        mf='manifests/vOTUs/{sample}.mf.{dedup}.csv',
    shell: """
    comm -1 -2 {input.csv} {input.dedupc} > {output.comp}
    sed -e "s#^#/group/ctbrowngrp2/scratch/annie/2023-swine-sra/sourmash/sig_files/sketch_vOTUs/high_qual/#" {output.comp} > {output.fp}
    awk 'NF{{print $0 ".sig.gz"}}' {output.fp} > {output.sigp}
    sourmash sig collect $(cat {output.sigp}) -o {output.mf} -F csv
    """

# Do mgmanysearch
rule do_mgsearch_v:
    input:
        sample='sig_files/sketch_reads/{sample}.sig.gz',
        mf='manifests/vOTUs/{sample}.mf.{dedup}.csv',
    output:
        csv='mgmanysearch/vOTU/{sample}.{dedup}.csv'
    shell: """
    sourmash scripts mgmanysearch --queries {input.mf} \
    --against {input.sample} -k 21 --scaled 1000 -o {output.csv} 
    """

# Do mgmanysearch
rule do_mgsearch_m:
    input:
        sample='sig_files/sketch_reads/{sample}.sig.gz',
        mf='manifests/MAGs/{sample}.mf.{dedup}.csv',
    output:
        csv='mgmanysearch/MAGs/{sample}.{dedup}.csv'
    shell: """
    sourmash scripts mgmanysearch --queries {input.mf} \
    --against {input.sample} -k 21 --scaled 1000 -o {output.csv} 
    """

